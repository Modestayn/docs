Урок 1 – Декоратори та оптимізація коду

Декоратори дозволяють обгортати функції або класи додатковою логікою без зміни їхнього коду. Це зручно для повторного використання та оптимізації.



Основні можливості:


Логування викликів функцій.

Кешування результатів для підвищення швидкодії.

Перевірка доступу або прав користувача.

Вимірювання часу виконання.



Приклад:

def logger(func):
    def wrapper(*args, **kwargs):
        print(f'Виклик функції {func.__name__}')
        return func(*args, **kwargs)
    return wrapper

@logger
def greet(name):
    return f'Привіт, {name}!'

print(greet('Артем'))


✅ Мета: студенти повинні навчитися:



Створювати власні декоратори.

Оптимізувати код за допомогою кешування та логування.

Розуміти принцип «обгортання функцій».
