Урок 4 – Мультимовність (i18n)

Мультимовність (i18n) дозволяє створювати інтерфейси, які підтримують кілька мов. Це важливо для міжнародних проектів та зручності користувачів.



Підходи до реалізації


JSON-файли з перекладами – кожна мова має свій файл: en.json, uk.json, es.json.

Бібліотеки – наприклад i18next або react-intl для React.

Динамічне перемикання – користувач може змінювати мову через селектор.

Зберігання вибору – у LocalStorage або cookies, щоб пам’ятати мову.



Приклад структури перекладів

// en.json
{
  "hello": "Hello",
  "welcome": "Welcome to our site"
}

// uk.json
{
  "hello": "Привіт",
  "welcome": "Ласкаво просимо на наш сайт"
}


Приклад використання у JavaScript

import i18next from 'i18next';

// Ініціалізація
i18next.init({
  lng: 'uk', // поточна мова
  resources: {
    en: { translation: { hello: 'Hello' } },
    uk: { translation: { hello: 'Привіт' } }
  }
});

// Отримання перекладу
console.log(i18next.t('hello')); // Привіт


Best practices


Не хардкодьте тексти у компонентах – завжди використовуйте переклади.

Організовуйте переклади у тематичні файли: auth.json, navbar.json.

Використовуйте fallback мову, якщо переклад відсутній.

Завжди тестуйте відображення для мов з різною довжиною слів (наприклад, англійська vs німецька).



✅ Мета: навчитися будувати багатомовний інтерфейс, підключати бібліотеку i18n, організовувати переклади та забезпечувати зручність перемикання мов.

