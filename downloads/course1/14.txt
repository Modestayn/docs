Lesson 14 – Препроцесор SCSS
SCSS – це препроцесор CSS, який додає потужні можливості для написання більш чистого, структурованого та підтримуваного коду. SCSS компілюється у звичайний CSS, який зрозумілий браузеру.

1. Змінні
Дозволяють зберігати повторювані значення (кольори, шрифти, розміри) і легко їх змінювати:

$primary-color: #3498db;
$font-stack: 'Arial, sans-serif';
$base-padding: 10px;

body {
font-family: $font-stack;
background-color: $primary-color;
padding: $base-padding;
}
2. Вкладення (Nesting)
Дозволяє писати селектори всередині батьківських, що робить код логічно структурованим:

.menu {
ul {
list-style: none;
padding: 0;
}
li {
display: inline-block;
margin-right: 15px;

a {
text-decoration: none;
color: $primary-color;

&:hover {
color: darken($primary-color, 10%);
}
}
}
}
3. Міксини
Це блоки коду, які можна повторно використовувати з параметрами:

@mixin flex-center($direction: row) {
display: flex;
flex-direction: $direction;
justify-content: center;
align-items: center;
}

.container {
@include flex-center(column);
}
4. Функції SCSS
SCSS має вбудовані функції для роботи з числами, кольорами, рядками та логікою:

.box {
width: 100% / 3;
background-color: lighten($primary-color, 20%);
}
5. Операції та обчислення
SCSS дозволяє виконувати математичні обчислення прямо у CSS:

.container {
padding: $base-padding * 2;
width: 100% - 40px;
}
6. Імпорт та модульність
Код можна розбивати на окремі файли для зручності та підключати їх:

// variables.scss
$primary-color: #3498db;

// mixins.scss
@mixin flex-center { display: flex; justify-content: center; align-items: center; }

// style.scss
/* Підключення файлів без конкретних посилань */
body {
color: $primary-color;
@include flex-center;
}
7. Переваги SCSS
Легше підтримувати великий проект.
Менше дублювання коду через змінні та міксини.
Можна писати логіку (обчислення, умови, цикли).
Підвищує швидкість командної роботи та читаність коду.
8. Інструкція по використанню SCSS
Встановити Node.js та npm.
Встановити SCSS: npm install -g sass.
Створити файл style.scss і писати код.
Скомпілювати SCSS у CSS: sass style.scss style.css --watch (автооновлення при зміні).
Підключити згенерований style.css у HTML.
9. Рекомендації та best practices
Використовувати змінні для всіх основних значень (кольори, відступи, шрифти).
Вкладати селектори максимум на 3 рівні, щоб код залишався читабельним.
Використовувати міксини для повторюваних блоків коду.
Розбивати SCSS на частини для модульності.
Обов’язково перевіряти згенерований CSS для сумісності з браузерами.
10. Додаткові можливості
Цикли: @for, @each, @while для генерації повторюваних стилів.
Умови: @if, @else для динамічних стилів.
Функції користувача для створення власних обчислень.
SCSS – потужний інструмент для будь-якого фронтенд-проєкту. Він економить час, спрощує підтримку коду і дозволяє писати адаптивні, чисті та масштабовані стилі.