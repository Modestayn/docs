Урок 6 – Підсумковий тест: TypeScript, React Hooks, Context та Props
Цей тест допоможе перевірити розуміння ключових тем курсу: типізація у TypeScript, робота з хуками React, контекстом, пропсами та оптимізацією ререндерів. Відповідай письмово або практично — у коді.

Теоретичні запитання:
Основи TypeScript
Що таке type і чим він відрізняється від interface?
Як типізувати масив рядків у TypeScript?
Як зробити властивість обов’язковою або необов’язковою в інтерфейсі?
Базові хуки
Для чого використовується хук useState?
Що таке useEffect і коли він виконується?
Що буде, якщо не вказати масив залежностей у useEffect?
Просунуті хуки
Для чого використовується useMemo?
У чому різниця між useCallback і useMemo?
Як працює useRef і для чого він може бути корисним?
Context та ререндери
Як створити і використати контекст за допомогою useContext?
Який підхід допомагає зменшити кількість непотрібних ререндерів у компоненті?
Коли краще використати useMemo, а коли React.memo?
Props
Як типізувати пропси у функціональному компоненті?
Як передати функцію у дочірній компонент і правильно її типізувати?
Чим відрізняється children від звичайного пропса?
Практичні завдання:
Завдання 1: Створи тип User з такими полями:
id: число
name: рядок
email: рядок
isAdmin?: необов’язкове булеве поле
Завдання 2: Зроби компонент Counter, який:
показує лічильник;
збільшує його при кліку;
виводить у console.log нове значення при кожній зміні.
Завдання 3: Зроби компонент ExpensiveCalculation, який:
приймає count як пропс;
рахує "важку" функцію (наприклад, фібоначчі);
використовує useMemo, щоб не рахувати при кожному рендері.
Завдання 4: Створи контекст теми (ThemeContext) зі значенням 'light' | 'dark':
В одному компоненті покажи тему;
В іншому — кнопку для зміни теми;
⭐ Додатково: мемоізуй дочірній компонент, щоб не ререндерився зайвий раз.
✅ Мета: студенти повинні продемонструвати:

Розуміння типізації у TypeScript.
Володіння базовими та просунутими React Hooks.
Уміння працювати з контекстом і оптимізовувати ререндери.
Коректну передачу та типізацію пропсів.
Практичне застосування знань у невеликих компонентах.