const lessonContainer = document.getElementById("lesson-container");
const lessonsGrid = document.getElementById("lessons-grid");
const lessonsContent = {
    "lesson1": "<h2>Lesson 1 – Основи HTML</h2>\n\n<p>\nHTML (HyperText Markup Language) – мова розмітки, яка визначає структуру вебсторінки.\nВона складається з <strong>тегів</strong>, які описують зміст: текст, заголовки, списки, зображення тощо.\n</p>\n\n<hr>\n\n<h3>1. Базова структура HTML</h3>\n<pre><code>&lt;!DOCTYPE html&gt; &lt;!-- HTML5 --&gt;\n&lt;html lang=\"uk\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt; &lt;!-- Кодування --&gt;\n&lt;title&gt;Назва сторінки&lt;/title&gt; &lt;!-- Заголовок у вкладці --&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;h1&gt;Головний заголовок&lt;/h1&gt;\n&lt;p&gt;Перший абзац тексту.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul>\n<li><strong>&lt;!DOCTYPE html&gt;</strong> – каже браузеру, що це HTML5.</li>\n<li><strong>&lt;html&gt;</strong> – корінь документа.</li>\n<li><strong>&lt;head&gt;</strong> – технічна інформація (кодування, стилі, скрипти).</li>\n<li><strong>&lt;body&gt;</strong> – вміст, який бачить користувач.</li>\n</ul>\n\n<hr>\n\n<h3>2. Заголовки</h3>\n<ul>\n<li><strong>&lt;h1&gt;</strong> – головний заголовок сторінки (важливий для SEO, має бути 1 раз).</li>\n<li><strong>&lt;h2&gt;–&lt;h6&gt;</strong> – підзаголовки різних рівнів для структурування контенту.</li>\n</ul>\n\n<pre><code>&lt;h1&gt;Рецепти&lt;/h1&gt;\n&lt;h2&gt;Супи&lt;/h2&gt;\n&lt;h3&gt;Борщ&lt;/h3&gt;\n&lt;h2&gt;Десерти&lt;/h2&gt;\n&lt;h3&gt;Тірамісу&lt;/h3&gt;\n</code></pre>\n\n<hr>\n\n<h3>3. Текстові теги</h3>\n<ul>\n<li><strong>&lt;p&gt;</strong> – абзац.</li>\n<li><strong>&lt;br&gt;</strong> – перенос рядка &lt;br&gt; (корисно віршах, адресах).</li>\n<li><strong>&lt;span&gt;</strong> – строчний тег для виділення частини тексту: <span style=\"color: red;\">червоний текст</span>.</li>\n<li><strong>&lt;hr&gt;</strong> – горизонтальна лінія для відділення змісту.</li>\n</ul>\n\n<hr>\n\n<h3>4. Блочні та строчні теги</h3>\n<ul>\n<li><strong>Блочні</strong> – займають всю ширину контейнера і починаються з нового рядка (приклади: &lt;div&gt;, &lt;p&gt;, &lt;h1&gt;, &lt;ul&gt;).</li>\n<li><strong>Строчні</strong> – займають лише місце під свій текст/контент і розташовуються \"в ряд\" (приклади: &lt;span&gt;, &lt;a&gt;, &lt;strong&gt;, &lt;img&gt;).</li>\n</ul>\n\n<hr>\n\n<h3>5. Зображення</h3>\n<p>Тег <strong>&lt;img&gt;</strong> використовується для вставки картинок.</p>\n<pre><code>&lt;img src=\"images/example.png\" alt=\"Приклад зображення\" width=\"300\"&gt;\n</code></pre>\n<ul>\n<li><strong>src</strong> – шлях до картинки.</li>\n<li><strong>alt</strong> – альтернативний текст (SEO + доступність для незрячих користувачів).</li>\n<li><strong>width / height</strong> – розміри (необов’язково).</li>\n</ul>\n\n<hr>\n\n<h3>6. Списки</h3>\n<ul>\n<li><strong>&lt;ul&gt;</strong> – невпорядкований список (з крапками).</li>\n<li><strong>&lt;ol&gt;</strong> – впорядкований список (з цифрами).</li>\n<li><strong>&lt;li&gt;</strong> – елемент списку.</li>\n</ul>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;Чай&lt;/li&gt;\n&lt;li&gt;Кава&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Перший крок&lt;/li&gt;\n&lt;li&gt;Другий крок&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<hr>\n\n<h3>7. Посилання</h3>\n<p>Теги <strong>&lt;a&gt;</strong> замінені на коментарі:</p>\n<pre><code>&lt;!-- посилання: Google --&gt;\n&lt;!-- посилання: Про нас --&gt;\n&lt;!-- посилання: Подзвонити --&gt;\n&lt;!-- посилання: Написати лист --&gt;\n</code></pre>\n<ul>\n<li><strong>href</strong> – адреса, куди веде посилання (коментар).</li>\n<li><strong>tel:</strong> – телефон (коментар).</li>\n<li><strong>mailto:</strong> – пошта (коментар).</li>\n</ul>",

    "lesson2": "<h2>Lesson 2 – Основи CSS та методологія БЕМ</h2>\n\n<p>\nУ цьому уроці ми познайомились із <strong>CSS</strong> (Cascading Style Sheets) – мовою стилів,\nяка відповідає за зовнішній вигляд HTML-елементів.\n</p>\n\n<hr>\n\n<h3>1. Підключення CSS</h3>\n<pre><code>&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt; &lt;!-- Зовнішній CSS (коментар замість посилання) --&gt;\n&lt;/head&gt;\n\n&lt;style&gt; /* Вбудований CSS */\np { color: blue; }\n&lt;/style&gt;\n\n&lt;p style=\"color: red;\"&gt;Інлайн-стиль&lt;/p&gt; &lt;!-- Найменш бажаний --&gt;\n</code></pre>\n\n<hr>\n\n<h3>2. Методологія БЕМ (Block – Element – Modifier)</h3>\n<p>\nБЕМ допомагає організувати класи в HTML і CSS, щоб код був зрозумілий і масштабований.\n</p>\n<pre><code>&lt;!-- Блок (незалежна сутність) --&gt;\n&lt;div class=\"card\"&gt;\n\n&lt;!-- Елемент (частина блоку) --&gt;\n&lt;h2 class=\"card__title\"&gt;Назва&lt;/h2&gt;\n&lt;p class=\"card__text\"&gt;Опис&lt;/p&gt;\n\n&lt;!-- Модифікатор (змінює вигляд блоку) --&gt;\n&lt;button class=\"card__btn card__btn--primary\"&gt;OK&lt;/button&gt;\n\n&lt;/div&gt;\n</code></pre>\n\n<hr>\n\n<h3>3. Основний тег для стилізації – &lt;div&gt;</h3>\n<p>\nТег <strong>&lt;div&gt;</strong> – контейнер без власного значення.\nВикористовується для групування елементів і створення структур сторінки.\n</p>\n\n<hr>\n\n<h3>4. Кольори</h3>\n<pre><code>/* CSS-формати кольорів */\ncolor: red;             /* назва кольору */\ncolor: #ff0000;         /* HEX */\ncolor: rgb(255, 0, 0);  /* RGB */\ncolor: rgba(255,0,0,0.5); /* з прозорістю */\ncolor: hsl(0, 100%, 50%); /* HSL */\n</code></pre>\n\n<hr>\n\n<h3>5. Одиниці вимірювання</h3>\n<ul>\n<li><strong>px</strong> – пікселі (фіксована величина).</li>\n<li><strong>%</strong> – відсотки від батьківського елемента.</li>\n<li><strong>em</strong> – відносно шрифту батьківського елемента.</li>\n<li><strong>rem</strong> – відносно шрифту кореня (&lt;html&gt;).</li>\n<li><strong>vh</strong> – відсоток від висоти вікна браузера.</li>\n<li><strong>vw</strong> – відсоток від ширини вікна браузера.</li>\n</ul>\n\n<pre><code>.box {\n  width: 200px;   /* пікселі */\n  height: 50%;    /* половина від контейнера */\n  font-size: 2em; /* у 2 рази більше за батьківський шрифт */\n  margin-top: 5vh; /* 5% від висоти екрана */\n}\n</code></pre>\n\n<hr>\n\n<h3>6. Основні властивості</h3>\n<pre><code>.block {\n  width: 300px;       /* ширина */\n  height: 150px;      /* висота */\n\n  background: lightblue; /* фон */\n  border: 2px solid black; /* рамка */\n\n  margin: 20px;       /* зовнішні відступи */\n  padding: 15px;      /* внутрішні відступи */\n}\n</code></pre>\n\n<ul>\n<li><strong>width / height</strong> – розміри елемента.</li>\n<li><strong>background</strong> – фон (колір, градієнт, картинка).</li>\n<li><strong>border</strong> – рамка (товщина, стиль, колір).</li>\n<li><strong>margin</strong> – відступ ЗОВНІ елемента.</li>\n<li><strong>padding</strong> – відступ ВСЕРЕДИНІ елемента.</li>\n</ul>\n\n<hr>\n\n<h3>7. Приклад стилізації</h3>\n<pre><code>&lt;div class=\"card card--highlight\"&gt;\n  &lt;h2 class=\"card__title\"&gt;Заголовок&lt;/h2&gt;\n  &lt;p class=\"card__text\"&gt;Це приклад картки з CSS-оформленням.&lt;/p&gt;\n&lt;/div&gt;\n\n/* CSS */\n.card {\n  width: 250px;\n  padding: 20px;\n  background: #f0f0f0;\n  border: 1px solid #ccc;\n  margin: 10px auto;\n}\n\n.card--highlight {\n  background: lightyellow;\n  border: 2px dashed orange;\n}\n\n.card__title {\n  font-size: 1.5rem;\n  margin-bottom: 10px;\n}\n\n.card__text {\n  font-size: 1rem;\n}\n</code></pre>",

    "lesson3": "<h2>Lesson 3 – Форми, API та Google Fonts</h2>\n\n<p>\nФорми у HTML дозволяють користувачам вводити дані та відправляти їх на сервер\n(наприклад: авторизація, реєстрація, пошук).\n</p>\n\n<hr>\n\n<h3>1. Тег &lt;form&gt;</h3>\n<p>\nОсновний контейнер для форми – <strong>&lt;form&gt;</strong>.\nВін визначає куди та яким методом будуть надсилатись дані.\n</p>\n\n<pre><code>&lt;form action=\"<!-- https://example.com/submit -->\" method=\"POST\"&gt;\n  &lt;input type=\"text\" name=\"username\" placeholder=\"Ваше ім’я\"&gt;\n  &lt;button type=\"submit\"&gt;Надіслати&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<ul>\n<li><strong>action</strong> – адреса, куди відправляються дані.</li>\n<li><strong>method</strong> – спосіб передачі даних:\n  <ul>\n  <li><strong>GET</strong> – дані видно в адресному рядку (для пошуку, фільтрації).</li>\n  <li><strong>POST</strong> – дані приховані, безпечніше (реєстрація, логін).</li>\n  </ul>\n</li>\n</ul>\n\n<hr>\n\n<h3>2. Теорія: що таке API</h3>\n<p>\n<strong>API</strong> (Application Programming Interface) – це “місток” між клієнтом (ваш сайт) і сервером.\nФорми відправляють дані на сервер (API), сервер їх обробляє і повертає результат.\n</p>\n\n<pre><code>Користувач → (заповнює форму) → Сайт → API → Сервер → Відповідь</code></pre>\n\n<p>\nНаприклад: форма входу на сайт передає <em>логін і пароль</em> на API,\nа сервер перевіряє їх і повертає результат.\n</p>\n\n<hr>\n\n<h3>3. Відправка форми без бекенду</h3>\n<p>\nЄ сервіси, які дозволяють відправляти форми напряму на e-mail без власного сервера:\n</p>\n<ul>\n<li><a href=\"<!-- https://formspree.io -->\" target=\"_blank\">Formspree</a></li>\n<li><a href=\"<!-- https://formsubmit.co -->\" target=\"_blank\">FormSubmit</a></li>\n</ul>\n\n<pre><code>&lt;form action=\"<!-- https://formspree.io/f/your-id -->\" method=\"POST\"&gt;\n  &lt;input type=\"email\" name=\"email\" placeholder=\"Ваш Email\"&gt;\n  &lt;textarea name=\"message\" placeholder=\"Ваше повідомлення\"&gt;&lt;/textarea&gt;\n  &lt;button type=\"submit\"&gt;Надіслати&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>\nТакі сервіси пересилають введені дані напряму на вашу пошту через свій API.\n</p>\n\n<hr>\n\n<h3>4. Основні типи інпутів</h3>\n<p>\nТег <strong>&lt;input&gt;</strong> має багато різних <em>type</em> для різних даних.\n</p>\n\n<ul>\n<li><strong>text</strong> – текстове поле.</li>\n<li><strong>email</strong> – перевіряє формат e-mail.</li>\n<li><strong>password</strong> – приховує введені символи.</li>\n<li><strong>number</strong> – тільки числа.</li>\n<li><strong>date</strong> – вибір дати.</li>\n<li><strong>checkbox</strong> – прапорець.</li>\n<li><strong>radio</strong> – перемикач (можна вибрати лише один варіант із групи).</li>\n<li><strong>file</strong> – завантаження файлів.</li>\n<li><strong>color</strong> – вибір кольору.</li>\n<li><strong>range</strong> – повзунок.</li>\n<li><strong>submit</strong> – кнопка для відправки форми.</li>\n</ul>\n\n<pre><code>&lt;form&gt;\n  &lt;input type=\"text\" placeholder=\"Ім’я\"&gt; &lt;br&gt;\n  &lt;input type=\"email\" placeholder=\"E-mail\"&gt; &lt;br&gt;\n  &lt;input type=\"password\" placeholder=\"Пароль\"&gt; &lt;br&gt;\n  &lt;input type=\"checkbox\"&gt; Приймаю умови &lt;br&gt;\n  &lt;input type=\"radio\" name=\"gender\"&gt; Чоловік\n  &lt;input type=\"radio\" name=\"gender\"&gt; Жінка &lt;br&gt;\n  &lt;input type=\"date\"&gt; &lt;br&gt;\n  &lt;input type=\"file\"&gt; &lt;br&gt;\n  &lt;input type=\"color\"&gt; &lt;br&gt;\n  &lt;input type=\"range\"&gt; &lt;br&gt;\n  &lt;button type=\"submit\"&gt;Відправити&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<hr>\n\n<h3>5. Підключення Google Fonts</h3>\n<p>\nЩоб використовувати красиві шрифти, можна підключити <strong>Google Fonts</strong>.\n</p>\n\n<pre><code>&lt;!-- У head додаємо посилання --&gt;\n&lt;link rel=\"preconnect\" href=\"<!-- https://fonts.googleapis.com -->\"&gt;\n&lt;link rel=\"preconnect\" href=\"<!-- https://fonts.gstatic.com -->\" crossorigin&gt;\n&lt;link href=\"<!-- https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap -->\" rel=\"stylesheet\"&gt;\n\n&lt;!-- Використання у CSS --&gt;\nbody {\n  font-family: 'Roboto', sans-serif;\n}\n</code></pre>\n\n<p>\nТепер весь текст на сторінці буде відображатись у шрифті <em>Roboto</em>.\n</p>",

    "lesson4": "<h2>Урок 4 – Flexbox</h2>\n<p>Flexbox – це потужний інструмент CSS для вирівнювання та розташування елементів у контейнері. Він дозволяє легко створювати гнучкі макети без використання float або позиціонування.</p>\n\n<h3>Основні властивості контейнера (батьківського елемента):</h3>\n<ul>\n<li><code>display: flex;</code> – включає Flexbox для контейнера.</li>\n<li><code>flex-direction</code> – напрямок головної осі:\n  <ul>\n  <li><code>row</code> – елементи по горизонталі (за замовчуванням).</li>\n  <li><code>column</code> – елементи по вертикалі.</li>\n  <li><code>row-reverse</code>, <code>column-reverse</code> – зворотні напрямки.</li>\n  </ul>\n</li>\n<li><code>justify-content</code> – вирівнювання елементів по головній осі:\n  <ul>\n  <li><code>flex-start</code> – початок</li>\n  <li><code>flex-end</code> – кінець</li>\n  <li><code>center</code> – по центру</li>\n  <li><code>space-between</code> – рівний проміжок між елементами</li>\n  <li><code>space-around</code> – рівний проміжок навколо елементів</li>\n  </ul>\n</li>\n<li><code>align-items</code> – вирівнювання по перпендикулярній осі:\n  <ul>\n  <li><code>flex-start</code> – початок</li>\n  <li><code>flex-end</code> – кінець</li>\n  <li><code>center</code> – по центру</li>\n  <li><code>stretch</code> – розтягнути</li>\n  </ul>\n</li>\n</ul>\n\n<h3>Властивості елементів (дочірніх елементів):</h3>\n<ul>\n<li><code>flex-grow</code> – наскільки елемент буде рости відносно інших.</li>\n<li><code>flex-shrink</code> – наскільки елемент буде стискатися.</li>\n<li><code>flex-basis</code> – початковий розмір елемента.</li>\n<li><code>align-self</code> – вирівнювання конкретного елемента незалежно від батька.</li>\n</ul>\n\n<h3>Приклад Flexbox:</h3>\n<pre><code>&lt;div class=\"flex-container\"&gt;\n  &lt;div class=\"item\"&gt;1&lt;/div&gt;\n  &lt;div class=\"item\"&gt;2&lt;/div&gt;\n  &lt;div class=\"item\"&gt;3&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n<pre><code>.flex-container {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  background: #f0f0f0;\n  padding: 20px;\n}\n\n.item {\n  background: #4A90E2;\n  color: white;\n  padding: 20px;\n  border-radius: 8px;\n}</code></pre>\n\n<p>✅ <strong>Мета:</strong> після цього уроку студенти повинні навчитися:</p>\n<ul>\n<li>Створювати флекс-контейнери та розуміти напрямки осей.</li>\n<li>Вирівнювати елементи по горизонталі та вертикалі.</li>\n<li>Використовувати <code>flex-grow</code> та <code>flex-shrink</code> для створення гнучких макетів.</li>\n</ul>",

    "lesson5": "<h2>Урок 5 – Практика Flexbox</h2>\n<p>Практика: створюємо міні-сайт з використанням Flexbox.</p>\n\n<h3>Завдання:</h3>\n<ul>\n<li>Створити шапку сайту з назвою та горизонтальним меню.</li>\n<li>Створити блок з картками курсів (3-4 картки), щоб вони вирівнювались по ширині та переносились при звуженні екрану.</li>\n<li>Додати футер, який завжди внизу сторінки.</li>\n</ul>\n\n<h3>HTML приклад:</h3>\n<pre><code>&lt;header class=\"header\"&gt;\n  &lt;h1&gt;Мої курси&lt;/h1&gt;\n  &lt;nav class=\"menu\"&gt;\n    &lt;a href=\"<!-- # -->\"&gt;Головна&lt;/a&gt;\n    &lt;a href=\"<!-- # -->\"&gt;Про нас&lt;/a&gt;\n    &lt;a href=\"<!-- # -->\"&gt;Контакти&lt;/a&gt;\n  &lt;/nav&gt;\n&lt;/header&gt;\n\n&lt;main class=\"courses\"&gt;\n  &lt;div class=\"card\"&gt;HTML &amp; CSS&lt;/div&gt;\n  &lt;div class=\"card\"&gt;JavaScript&lt;/div&gt;\n  &lt;div class=\"card\"&gt;Flexbox&lt;/div&gt;\n  &lt;div class=\"card\"&gt;React&lt;/div&gt;\n&lt;/main&gt;\n\n&lt;footer class=\"footer\"&gt;\n  &lt;p&gt;Розробив Artem&lt;/p&gt;\n&lt;/footer&gt;\n</code></pre>\n\n<h3>CSS приклад з Flexbox:</h3>\n<pre><code>/* Шапка та меню */\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  background: #4A90E2;\n  color: white;\n}\n\n.menu a {\n  margin-left: 20px;\n  color: white;\n  text-decoration: none;\n}\n\n/* Блок курсів */\n.courses {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 20px;\n}\n\n.card {\n  flex: 1 1 200px;\n  margin: 10px;\n  padding: 20px;\n  background: #F5F5F5;\n  text-align: center;\n  border-radius: 8px;\n}\n\n/* Футер */\n.footer {\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n  background: #333;\n  color: white;\n}</code></pre>\n\n<p>✅ <strong>Мета:</strong> студенти повинні навчитися:</p>\n<ul>\n<li>Вирівнювати елементи по горизонталі та вертикалі.</li>\n<li>Використовувати перенесення елементів за допомогою <code>flex-wrap</code>.</li>\n<li>Застосовувати гнучку ширину карток за допомогою <code>flex</code>.</li>\n</ul>",


    "lesson6": "<h2>Урок 6 – Позиціювання (Positioning)</h2>\n<p>CSS позиціювання дозволяє розташовувати елементи на сторінці у потрібному місці. Основні властивості:</p>\n\n<h3>Типи позиціювання:</h3>\n<ul>\n<li><code>static</code> – стандартне позиціювання (за замовчуванням), елементи йдуть один за одним.</li>\n<li><code>relative</code> – відносне позиціювання: елемент зміщується від свого початкового місця.</li>\n<li><code>absolute</code> – абсолютне: елемент позиціонується від найближчого батька з <code>position: relative</code> або від body, якщо таких немає.</li>\n<li><code>fixed</code> – фіксоване: елемент прив'язаний до вікна браузера і не рухається при скролі.</li>\n<li><code>sticky</code> – липке: елемент веде себе як relative, поки не дійде до заданого порогу, після чого прилипає.</li>\n</ul>\n\n<h3>Основні властивості для позиціювання:</h3>\n<ul>\n<li><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> – задають відступ від відповідного краю.</li>\n<li><code>z-index</code> – порядок накладання елементів (вищий – поверх).</li>\n</ul>\n\n<h3>Приклади:</h3>\n\n<p><strong>Relative:</strong></p>\n<pre><code>.box {\n  position: relative;\n  top: 20px;\n  left: 30px;\n}</code></pre>\n\n<p><strong>Absolute:</strong></p>\n<pre><code>.container {\n  position: relative;\n  width: 300px;\n  height: 200px;\n  background: #f0f0f0;\n}\n\n.box {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background: #4A90E2;\n  color: white;\n  padding: 10px;\n}</code></pre>\n\n<p><strong>Fixed:</strong></p>\n<pre><code>.header {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  background: #333;\n  color: white;\n  padding: 15px;\n}</code></pre>\n\n<p><strong>Sticky:</strong></p>\n<pre><code>.title {\n  position: sticky;\n  top: 0;\n  background: yellow;\n  padding: 10px;\n}</code></pre>\n\n<p>✅ <strong>Мета:</strong> студенти повинні навчитися:</p>\n<ul>\n<li>Розуміти різницю між static, relative, absolute, fixed і sticky.</li>\n<li>Застосовувати top/right/bottom/left для зміщення елементів.</li>\n<li>Керувати накладанням елементів через z-index.</li>\n</ul><!-- Посилання видалено як коментар -->",


    "lesson7": "<h2>Урок 7 – Псевдокласи (Pseudo-classes)</h2>\n<p>Псевдокласи дозволяють стилізувати елементи залежно від їх стану, положення або взаємодії з користувачем, без додаткових класів у HTML.</p>\n\n<h3>Основні псевдокласи:</h3>\n<ul>\n<li><code>:hover</code> – коли користувач наводить мишку на елемент.</li>\n<li><code>:active</code> – коли елемент активний (натиснутий).</li>\n<li><code>:focus</code> – коли елемент має фокус (наприклад, input при кліку).</li>\n<li><code>:first-child</code> – перший дочірній елемент у контейнері.</li>\n<li><code>:last-child</code> – останній дочірній елемент.</li>\n<li><code>:nth-child(n)</code> – n-ий дочірній елемент (можна використовувати формули).</li>\n<li><code>:not(selector)</code> – елементи, які не відповідають селектору.</li>\n</ul>\n\n<h3>Приклади:</h3>\n\n<p><strong>Hover та Active:</strong></p>\n<pre><code>button:hover {\n  background-color: #4A90E2;\n  color: white;\n}\n\nbutton:active {\n  transform: scale(0.98);\n}</code></pre>\n\n<p><strong>Focus:</strong></p>\n<pre><code>input:focus {\n  border-color: #F5A623;\n  outline: none;\n}</code></pre>\n\n<p><strong>First / Last Child:</strong></p>\n<pre><code>ul li:first-child {\n  font-weight: bold;\n}\n\nul li:last-child {\n  color: red;\n}</code></pre>\n\n<p><strong>Nth-child:</strong></p>\n<pre><code>ul li:nth-child(2n) {\n  background-color: #f0f0f0;\n}</code></pre>\n\n<p><strong>Not:</strong></p>\n<pre><code>ul li:not(:first-child) {\n  margin-left: 10px;\n}</code></pre>\n\n<p>✅ <strong>Мета:</strong> студенти повинні навчитися:</p>\n<ul>\n<li>Використовувати псевдокласи для стилізації різних станів елементів.</li>\n<li>Створювати динамічний інтерфейс без додаткових класів у HTML.</li>\n<li>Розуміти, як працюють структурні псевдокласи (first-child, nth-child тощо).</li>\n</ul><!-- Посилання видалено як коментар -->",


    "lesson8": "<h2>Урок 8-10 – Реалізація власного проекту</h2>\n<p>У цьому уроці ми об'єднуємо всі знання, отримані раніше, та створюємо власний веб-проект. Дуже важливо дотримуватися правил і структурованого підходу.</p>\n\n<h3>Кроки та правила:</h3>\n<ol>\n<li><strong>Ідея:</strong> визначте, що саме робитимете. Наприклад, невеликий сайт-портфоліо, блог або навчальний додаток.</li>\n<li><strong>Структура проекту:</strong>\n<ul>\n<li>index.html</li>\n<li>css/</li>\n<li>js/</li>\n<li>images/</li>\n</ul>\nОрганізуйте файли так, щоб їх було легко знаходити та змінювати.\n</li>\n<li><strong>Макет та дизайн:</strong> визначте блоки сайту – header, footer, sidebar, main content. Використовуйте Flexbox, Grid, Tailwind або чистий CSS для верстки.</li>\n<li><strong>Функціональність:</strong> сплануйте, що повинно працювати: кнопки, фільтри, форми, анімації. Пишіть код модульно та уникайте дублювання.</li>\n<li><strong>Форми та дані користувачів:</strong> форми можна відправляти через /* Formcarry або інший сервіс */. Якщо ліміт буде досягнуто, сайт має працювати і без форми. Не зберігайте чутливі дані лише у localStorage без обмежень.</li>\n<li><strong>Валідація та обробка помилок:</strong> перевіряйте введені дані, обробляйте можливі помилки під час відправки форм чи запитів.</li>\n<li><strong>Тестування:</strong> перевіряйте сайт на різних пристроях та браузерах, переконайтеся, що адаптивність працює, стилі не ламаються, функції не зависають.</li>\n<li><strong>Оптимізація:</strong> мінімізуйте CSS/JS, оптимізуйте картинки, використовуйте lazy loading, щоб сайт швидко завантажувався.</li>\n<li><strong>Безпека та доступність:</strong> семантичний HTML, alt для картинок, aria-label для кнопок, безпечне зберігання даних, перевірка користувацьких вводів.</li>\n<li><strong>Документування:</strong> коментуйте складні частини коду, щоб було зрозуміло, як він працює.</li>\n<li><strong>Резервні варіанти:</strong> підготуйте код так, щоб сайт працював навіть якщо зовнішні сервіси /* як Formcarry */ недоступні.</li>\n</ol>\n\n<p>✅ Порада: починайте з мінімальної робочої версії (MVP) і поступово додавайте функціонал. Завжди тестуйте кожну частину перед переходом до наступної.</p>\n\n<p>Після завершення цього уроку у вас буде повністю функціональний власний проект, готовий для демонстрації та подальшого розвитку.</p>",

    "lesson11": "<h2>Урок 11 – Адаптація сайту та хостинг на Netlify</h2>\n\n<p>У цьому уроці ми навчимося робити сайт адаптивним, перевіряти його на різних пристроях і розмістимо його на безкоштовному хостингу.</p>\n\n<h3>1. Адаптивність та медіа-запити</h3>\n<p>Адаптивний сайт підлаштовується під різні розміри екранів: ПК, планшети, смартфони.</p>\n\n<ol>\n<li><strong>Viewport:</strong> додайте у <code>&lt;head&gt;</code> тег для коректного масштабування на мобільних пристроях:\n<pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;</code></pre></li>\n\n<li><strong>Медіа-запити:</strong> CSS правила, які застосовуються лише при певній ширині екрану:\n<pre><code>@media (max-width: 768px) {\n  .header {\n    flex-direction: column;\n  }\n  .folder {\n    font-size: 14px;\n  }\n}</code></pre>\n<p>Можна змінювати верстку, розміри шрифтів, відступи та порядок блоків для різних екранів.</p></li>\n\n<li><strong>Flexbox та Grid:</strong> використовуйте їх для гнучкої розкладки елементів. Наприклад, у мобільній версії можна ставити елементи один під одним, а на великому екрані — в рядок.</li>\n\n<li><strong>Тестування:</strong> відкривайте сайт на різних пристроях або у devtools браузера, перевіряйте різні ширини та орієнтації екрана.</li>\n</ol>\n\n<h3>2. Хостинг на Netlify</h3>\n<p>Можна безкоштовно розмістити статичний сайт (HTML, CSS, JS) без PHP або серверної частини.</p>\n\n<ol>\n<li>Створіть обліковий запис на платформі для хостингу.</li>\n<li>Зробіть репозиторій з вашим проектом.</li>\n<li>Зробіть деплой проекту з репозиторію.</li>\n<li>Після деплою отримаєте власне посилання на сайт.</li>\n<li>Якщо ви використовуєте форми, вони будуть працювати без серверної частини. Але завжди готуйте запасний варіант фільтрації/зберігання локально, якщо ліміт на формі буде вичерпано.</li>\n</ol>\n\n<h3>3. Поради</h3>\n<ul>\n<li>Використовуйте відносні розміри (%, rem, vh, vw) замість фіксованих пікселів для кращої адаптивності.</li>\n<li>Перевіряйте контрастність тексту та доступність для людей з обмеженими можливостями.</li>\n<li>Оптимізуйте зображення та медіа для швидкого завантаження.</li>\n<li>Не забувайте про тестування форм та локальне зберігання даних для випадку перевищення ліміту.</li>\n</ul>\n\n<p>Після цього уроку ваш сайт буде повністю адаптований до будь-яких пристроїв і готовий до публікації.</p>",


    "lesson12": "<h2>Lesson 12 – Фінальний проект</h2><p><strong>Завдання:</strong> Зверстати сайт за макетом, адаптувати під всі резолюції та розмістити на хостингу.</p><p><strong>Посилання на макет:</strong> макет</p><h3>План роботи:</h3><ol><li>Вивчити макет та визначити логічні блоки сторінки (Header, Hero, Content, Footer).</li><li>Створити HTML-структуру з семантичними тегами.</li><li>Оформити CSS згідно макету:<ul><li>Використати Flexbox та Grid для позиціонування.</li><li>Дотримуватись кольорів, шрифтів та відступів.</li></ul></li><li>Адаптація під мобільні та планшети:<ul><li>Медіа-запити (@media) для різних ширин екрану.</li><li>Контент залишився читабельним і не зсувався.</li></ul></li><li>Тестування:<ul><li>Браузери та різні пристрої.</li><li>Інтерактивні елементи (кнопки, меню, форми).</li></ul></li><li>Хостинг:<ul><li>Завантажити файли на хостинг.</li><li>Перевірити коректну роботу сайту онлайн.</li></ul></li></ol>",


    "lesson13": "<h2>Lesson 13 – Тестування та дебагінг сайту</h2><p><strong>Завдання:</strong> Отримати сайт із навмисними помилками в коді та навчитися їх знаходити і виправляти.</p><h3>Навіщо це потрібно:</h3><ul><li>Розвиває навички <strong>дебагінгу</strong> – уміння знаходити та виправляти помилки в HTML, CSS, JS.</li><li>Підвищує уважність та вміння аналізувати код.</li><li>Готує до реальних проєктів, де баги завжди трапляються і їх треба швидко усувати.</li><li>Допомагає зрозуміти, як браузери обробляють код та як реагують на помилки.</li></ul><h3>Як це робити:</h3><ol><li>Відкрити сайт у браузері та уважно оглянути візуально – чи все відображається правильно.</li><li>Використати інструменти розробника (DevTools):<ul><li>Console – для перевірки помилок JS.</li><li>Elements – для перевірки структури HTML та CSS.</li><li>Network – для контролю завантаження ресурсів.</li></ul></li><li>Прочитати повідомлення про помилки у консолі та спробувати зрозуміти їх причину.</li><li>Виправити помилки по черзі та перевіряти результат після кожної зміни.</li><li>Звертати увагу на:<ul><li>Синтаксис HTML, CSS, JS.</li><li>Правильне використання селекторів та класів.</li><li>Порядок підключення скриптів та стилів.</li><li>Адаптивність та медіа-запити.</li></ul></li></ol><h3>Де це знадобиться:</h3><ul><li>Реальні проєкти: будь-який сайт або веб-додаток потребує тестування перед запуском.</li><li>Співбесіди та технічні завдання: часто перевіряють уміння знаходити баги.</li><li>Покращує загальну грамотність у коді та робить розробника більш професійним.</li></ul>",

    "lesson14": "<h2>Lesson 14 – Препроцесор SCSS</h2><p>SCSS – це препроцесор CSS, який додає потужні можливості для написання більш чистого, структурованого та підтримуваного коду. SCSS компілюється у звичайний CSS, який зрозумілий браузеру.</p><h3>1. Змінні</h3><p>Дозволяють зберігати повторювані значення (кольори, шрифти, розміри) і легко їх змінювати:</p><pre><code>$primary-color: #3498db;\n$font-stack: 'Arial, sans-serif';\n$base-padding: 10px;\n\nbody {\nfont-family: $font-stack;\nbackground-color: $primary-color;\npadding: $base-padding;\n}</code></pre><h3>2. Вкладення (Nesting)</h3><p>Дозволяє писати селектори всередині батьківських, що робить код логічно структурованим:</p><pre><code>.menu {\nul {\nlist-style: none;\npadding: 0;\n}\nli {\ndisplay: inline-block;\nmargin-right: 15px;\n\na {\ntext-decoration: none;\ncolor: $primary-color;\n\n&:hover {\ncolor: darken($primary-color, 10%);\n}\n}\n}\n}</code></pre><h3>3. Міксини</h3><p>Це блоки коду, які можна повторно використовувати з параметрами:</p><pre><code>@mixin flex-center($direction: row) {\ndisplay: flex;\nflex-direction: $direction;\njustify-content: center;\nalign-items: center;\n}\n\n.container {\n@include flex-center(column);\n}</code></pre><h3>4. Функції SCSS</h3><p>SCSS має вбудовані функції для роботи з числами, кольорами, рядками та логікою:</p><pre><code>.box {\nwidth: 100% / 3;\nbackground-color: lighten($primary-color, 20%);\n}</code></pre><h3>5. Операції та обчислення</h3><p>SCSS дозволяє виконувати математичні обчислення прямо у CSS:</p><pre><code>.container {\npadding: $base-padding * 2;\nwidth: 100% - 40px;\n}</code></pre><h3>6. Імпорт та модульність</h3><p>Код можна розбивати на окремі файли для зручності та підключати їх:</p><pre><code>// variables.scss\n$primary-color: #3498db;\n\n// mixins.scss\n@mixin flex-center { display: flex; justify-content: center; align-items: center; }\n\n// style.scss\n/* Підключення файлів без конкретних посилань */\nbody {\ncolor: $primary-color;\n@include flex-center;\n}</code></pre><h3>7. Переваги SCSS</h3><ul><li>Легше підтримувати великий проект.</li><li>Менше дублювання коду через змінні та міксини.</li><li>Можна писати логіку (обчислення, умови, цикли).</li><li>Підвищує швидкість командної роботи та читаність коду.</li></ul><h3>8. Інструкція по використанню SCSS</h3><ol><li>Встановити Node.js та npm.</li><li>Встановити SCSS: <code>npm install -g sass</code>.</li><li>Створити файл <code>style.scss</code> і писати код.</li><li>Скомпілювати SCSS у CSS: <code>sass style.scss style.css --watch</code> (автооновлення при зміні).</li><li>Підключити згенерований <code>style.css</code> у HTML.</li></ol><h3>9. Рекомендації та best practices</h3><ul><li>Використовувати змінні для всіх основних значень (кольори, відступи, шрифти).</li><li>Вкладати селектори максимум на 3 рівні, щоб код залишався читабельним.</li><li>Використовувати міксини для повторюваних блоків коду.</li><li>Розбивати SCSS на частини для модульності.</li><li>Обов’язково перевіряти згенерований CSS для сумісності з браузерами.</li></ul><h3>10. Додаткові можливості</h3><ul><li>Цикли: <code>@for</code>, <code>@each</code>, <code>@while</code> для генерації повторюваних стилів.</li><li>Умови: <code>@if</code>, <code>@else</code> для динамічних стилів.</li><li>Функції користувача для створення власних обчислень.</li></ul><p>SCSS – потужний інструмент для будь-якого фронтенд-проєкту. Він економить час, спрощує підтримку коду і дозволяє писати адаптивні, чисті та масштабовані стилі.</p>",

    "lesson15": "<h2>Lesson 15 – Bootstrap</h2><p>Bootstrap – це популярний CSS-фреймворк для швидкої розробки адаптивних вебсайтів. Він надає готові стилі, компоненти та JavaScript-функціонал.</p><h3>1. Підключення Bootstrap</h3><p>Можна підключати через CDN або локальні файли:</p><pre><code>&lt;!-- CDN CSS --&gt;\n&lt;!-- посилання видалено --&gt;\n\n&lt;!-- CDN JS --&gt;\n&lt;!-- посилання видалено --&gt;\n</code></pre><h3>2. Сітка (Grid system)</h3><p>Bootstrap використовує 12-колонну сітку для адаптивного дизайну:</p><pre><code>&lt;div class=\"container\"&gt;\n&lt;div class=\"row\"&gt;\n&lt;div class=\"col-12 col-md-6\"&gt;Півколонки на середніх екранах&lt;/div&gt;\n&lt;div class=\"col-12 col-md-6\"&gt;Інша півколонка&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><h3>3. Основні класи Bootstrap</h3><ul><li><code>container</code> – обмежує ширину контенту і додає відступи.</li><li><code>row</code> – контейнер для колонок.</li><li><code>col</code> – колонки сітки, можна вказувати розміри для різних екранів: <code>col-sm-4</code>, <code>col-lg-6</code>.</li><li>Утиліти: <code>m-3</code>, <code>p-2</code> для відступів, <code>text-center</code> для центрування тексту і т.д.</li></ul><h3>4. Компоненти Bootstrap</h3><p>Фреймворк надає готові стилізовані компоненти:</p><ul><li>Кнопки: <code>&lt;button class=\"btn btn-primary\"&gt;Click&lt;/button&gt;</code></li><li>Форми: <code>&lt;input class=\"form-control\"&gt;</code></li><li>Навігація: <code>&lt;nav class=\"navbar navbar-expand-lg navbar-light bg-light\"&gt;</code></li><li>Карти: <code>&lt;div class=\"card\"&gt;</code></li><li>Модальні вікна, таби, акордеони, слайдери</li></ul><h3>5. Адаптивність</h3><p>Bootstrap має медіа-запити за замовчуванням:</p><ul><li><code>sm</code> – ≥576px</li><li><code>md</code> – ≥768px</li><li><code>lg</code> – ≥992px</li><li><code>xl</code> – ≥1200px</li><li><code>xxl</code> – ≥1400px</li></ul><p>Це дозволяє створювати адаптивні макети без ручного написання CSS.</p><h3>6. Переваги Bootstrap</h3><ul><li>Швидкий старт проекту без створення всіх стилів з нуля.</li><li>Адаптивний дизайн одразу «з коробки».</li><li>Багато готових компонентів та утиліт.</li><li>Можна легко кастомізувати через змінні Sass.</li></ul><h3>7. Best practices при використанні Bootstrap</h3><ul><li>Не змінювати базові класи, краще створювати власні для додаткових стилів.</li><li>Використовувати утиліти для відступів, центрування, видимості елементів.</li><li>Сітка – основа для побудови макету, компоненти – для елементів UI.</li><li>Користуватися медіа-запитами Bootstrap для адаптивності замість власних, якщо можливо.</li><li>Комбінувати Bootstrap з власним SCSS для унікального дизайну.</li></ul><h3>8. Приклад використання</h3><pre><code>&lt;div class=\"container mt-5\"&gt;\n&lt;div class=\"row\"&gt;\n&lt;div class=\"col-md-4\"&gt;\n&lt;div class=\"card\"&gt;\n&lt;div class=\"card-body\"&gt;\n&lt;h5 class=\"card-title\"&gt;Card 1&lt;/h5&gt;\n&lt;p class=\"card-text\"&gt;Опис картки.&lt;/p&gt;\n&lt;a href=\"#\" class=\"btn btn-primary\"&gt;Click&lt;/a&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"col-md-4\"&gt;...&lt;/div&gt;\n&lt;div class=\"col-md-4\"&gt;...&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>Bootstrap – це фундамент для швидкої, чистої і адаптивної розробки фронтенду. Комбінуючи його з SCSS, можна створювати проекти, які легко підтримувати та масштабувати.</p>",

    "lesson16": "<h2>Lesson 16 – Здача та захист фінальних проектів</h2><p>На цьому уроці студенти презентують свої фінальні проекти. Основна мета – перевірка практичних навичок і розуміння матеріалу курсу.</p><h3>1. Перевірка коду</h3><ul><li>Я буду перевіряти ваш HTML, CSS (SCSS) та використання Bootstrap, Flexbox, медіа-запитів.</li><li>Звертатиму увагу на структурованість коду, дотримання best practices, назви класів та змінних.</li><li>Перевірка адаптивності та роботи інтерактивних елементів сайту.</li></ul><h3>2. Питання по коду</h3><p>Я можу задавати запитання по вашому коду, наприклад:</p><ul><li>Чому обрав саме таку структуру HTML?</li><li>Як працює ваш Flexbox або Grid layout?</li><li>Які класи Bootstrap ви використали та чому?</li><li>Як реалізували адаптивність під різні екрани?</li></ul><h3>3. Сертифікат</h3><p>Після захисту ви зможете написати у чат Telegram свій ПІБ (українською або англійською), щоб отримати сертифікат про закінчення курсу.</p><h3>4. Коротка роудмепа по фронтенду після курсу</h3><ul><li>Регулярно повторювати основи HTML, CSS, JS, Flexbox, Grid та Bootstrap.</li><li>Практикуватися на невеликих проектах: сайти-портфоліо, лендінги, інтерактивні компоненти.</li><li>Вивчити додатково: ES6+, DOM, Fetch API, LocalStorage/SessionStorage.</li><li>Опанувати базові фреймворки та бібліотеки: React, Vue або Angular.</li><li>Зрозуміти основи систем контролю версій (Git, GitHub) та деплой сайтів.</li><li>Слідкувати за сучасними трендами в веб-розробці та покращувати UX/UI навички.</li></ul><!-- Посилання видалено як коментар -->",

};
const lessonsContainer = document.getElementById("lessons-grid");
const viewer = document.getElementById("lesson-viewer");
const viewerTitle = document.getElementById("viewer-title");
const viewerText = document.getElementById("viewer-text");
const backBtn = document.getElementById("back-btn");

Object.keys(lessonsContent).forEach(lessonId => {
    const fileDiv = document.createElement("div");
    fileDiv.className = "file";
    fileDiv.dataset.id = lessonId;

    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = lessonsContent[lessonId];
    const title = tempDiv.querySelector("h2")?.textContent || lessonId;

    fileDiv.textContent = `📄 ${title}`;
    lessonsContainer.appendChild(fileDiv);

    fileDiv.addEventListener("click", () => {
        viewerTitle.textContent = title;
        viewerText.innerHTML = lessonsContent[lessonId];
        lessonsContainer.classList.add("hidden");
        viewer.classList.remove("hidden");
    });
});

backBtn.addEventListener("click", () => {
    viewer.classList.add("hidden");
    lessonsContainer.classList.remove("hidden");
});